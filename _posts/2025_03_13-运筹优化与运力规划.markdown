---
layout: post
title:  "运筹优化与运力规划"
date:   2025-03-13 14:46:16 +0800
categories: 运筹优化
---

外卖配送是一个典型的O2O场景，需要在线下运行商家、运行骑手，还要在线上将这些需求和运力供给给合理的配置，从而实现提高整体的效率。而实现资源优化配置的过程，实际上是有分层的，根据我们的理解，可以分为3层.
1. 基础层是结构优化，它直接决定了配送系统效率的上限。这种基础结构的优化，周期比较长，频率比较低，包括配送网络规划，运力结构规划等。
2. 中间层是市场调节，相对来说是中短期的，主要是通过定价或者营销手段，使供需达到一个相对理想的平衡状态。
3. 再上层是实时匹配，通过调度做实时的资源最优配置。实现匹配的频率是最高的，决策的周期也是最短的。

实战业务项目学习：
配送连接的是商家、顾客、骑手三方，配送网络决定了这三方的连接关系。用户在点外卖的时候，为他服务的骑手是谁，又是怎么确定的。这些是由配送区域边界决定的，配送区域边界指的时一些商家集合所对应的范围。配送区域边界实际上就是给配送系统强加的约束。
在传统物流中，影响末端配送效率最关键的点，时配送员对他所负责的区域的熟悉程度。区域规划项目的发起，存在很多问题需要解决主要包括三种情况:
1. 配送区域里的商家不聚合。
2. 区域奇形怪状，空驶严重。
3. 站点的大小不合理。

什么是好区域规划方案？基于统计分析的优化目标设定。
优化的三要素：目标、约束、决策变量。
1. 首先确定优化目标。在很多比较稳定或者传统的业务场景中，目标非常确定。而在区域规划场景中，如何定义优化目标呢？首先，我们要思考的是区域规划主要影响什么，影响的主要是骑手的顺路性、空驶率，也就是骑手平均为每一单付出的路程成本。因此我们将业务目标定为优化骑手的单均行驶距离。基于现有的大量区域和站点积累的数据，做大量的统计分析后，可以定义除这样几个指标：商家聚合度、订单的聚合度、订单重心和商家重心的偏离程度。数据分析的结果表明，这几个指标和单均行驶距离的相关性很强。则问题明确为优化这三个指标。
2. 需要梳理业务约束，区域单量有上限和下限；区域之间不能有重合，不能有商家归多个区域负责；所有的AOI不能有一楼，都要被某个区域覆盖到，不能出现商家没有站点的服务。

整体的技术方案分成三部分:
1. 首先，根据三个目标函数，确定商家最优集合。
2. 怎么把区域边界画出来？为了解决这个问题，配送团队和地图团队进行了合作。先利用路网信息，把城市切成若干互不重叠的多边形，然后根据计算几何，将一批商家对应的多边形拼成完整的区域边界。
3. 自主研发配送仿真系统，评测这样的区域规划对应的单均行驶距离和体验指标是否符合预期。因为一线直接变动的成本非常高，仿真系统就起到了非常好的作用。

智能骑手排班:
业务背景: 这是随着外卖配送的营业时间越来越长而衍生出的一个项目。外卖配送场景订单“峰谷效应”非常明显。系统没办法把24小时根据每个人的工作时长做平均切分，也需要进行排班。
综合考虑后，我们最终基于约束条件，根据启发式算法构建初始方案，再用局部搜索迭代优化。使用这样的方式，求解速度能够达到毫秒级，而且可以给出任意站点的排班方案。整体的优化指标还不错，当然不保证是最优解，只是可以接受的满意解。

骑手路径规划：
在求解路径规划问题上，很多公司的技术团队，都经历了这样的阶段: 起初，采用类似遗传算法的迭代搜索算法，但是随着业务的单量变大，发现算法耗时太慢，根本不可接受。然后，改为大规模邻域搜索算法，但算法依然有很强的随机性，因为没有随机性就无法获得比较好的解。而这种基于随机迭代的搜索策略，带来很强的不确定性，在问题规模大的场景会出现非常多的bad case。另外，迭代搜索耗时太长了。主要原因是：随机迭代算法是把组合优化问题当成一个单纯的Permutation问题去求解，很少用到问题结构特征。类似“无脑”的方式很难有出色的优化效果。
因此在该项目中，基本可以确定这样的技术路线。首先，只能做启发式定向搜索，不能在算法中加随机扰动。不允许同样的输入在不同时刻给出不一样的优化结果。然后，不能用普通迭代搜索，必须把这个问题结构特性挖掘出来，做基于知识的定制化搜索。
做了一个有意思的建模转换，把它看作流水调度问题：每个订单可以认为是Job；一个订单的两个任务取餐和送餐，可以认为是一个job的operation。任意两个任务点之间的通行时间，可以认为是序列相关的准备时间。每一单承诺的送达时间，包括预订单和即时单，可以映射到流水线调度问题中的提前和拖期惩罚上。

订单智能调度:
配送调度场景，可以用数学语言描述，它不仅是个业务问题，更是一个标准的组合优化问题，而且是一个马尔可夫决策过程。
在时间段\deltaT内，新订单连续动态到达；对于时刻t, 待分配订单集合为R(t)={r_i|i=1,...,n_t}。定义G(t)={V(t),A(t)}为t时刻问题的图，其中V(t)为t时刻的位置点集，包含t时刻:
骑手集合{q_j, j =1...m}的位置D(t)={d_j(t),j=1,...,m},n_t个订单的取餐位置P+(t)={1,2,...,n_t},送餐位置P-(t)={1,2,..,n_t}。
A(t)为t时刻的弧集A(t)={arc(a,b)|\forAll a,b\in V(t), a!= b}, 每条弧arc(a,n)对应的距离和时间确定。
对于\deltaT内的每个时刻t, 如何将R(t)分配给骑手并确定每个骑手q_j的节点访问顺序S_j(t), 使得\deltaT内整体的顾客体验，骑手效率等指标最优。
并非对于某一个时刻的一批订单做最优分配就足够，还需要考虑整个时间窗维度，每一次指派对后面的影响。每一次订单分配，都影响了每个骑手后续时段的位置分布和行进方向，如果骑手的分布和方向不适合未来的订单结构，相当于降低了后续调度时刻最优性的天花板。因此要考虑长周期的优化，而不是一个静态优化问题。

面临的问题规划，前几年只是区域维度的调度粒度，现在又更多的业务场景，需要做城市级的全局优化匹配。目前调度系统处理的问题的峰值规模是1万多单和几万名骑手的匹配，而算法允许的运行时间只有几秒钟，同时对内存的消耗非常大。
总结下，三类挑战：
1. 性能要求极高，要做到万单对万人的秒级求解，我们之前做了一些工作，比如基于历史最优指派的结果，用机器学习模型做剪枝。基于大量的历史数据，可以帮助我们节省很多无用的匹配方案评价。
2. 动态性，作为MDP维妮塔，需要考虑动态优化场景，这涉及大量的预估环节。在只有当前未完成订单的情况下，优化不是单纯的机器学习模型，也不是单纯的启发式规则，优化算法是结合真是数据和算法设计者的经验，学习和演进而得。只有这样，才能在性能要求极高得业务场景下，快速得到鲁棒得优化方案。

Reference:
美团智能配送系统的运筹优化实战